{"version":3,"sources":["webpack:///./src/components/MarkdownLayout.js","webpack:///./src/mdx/laravel-relationships.mdx","webpack:///./src/pages/laravel-relationships.js"],"names":["components","h1","props","className","h2","h3","h4","p","ul","ol","li","layoutProps","_frontmatter","MDXLayout","children","MDXContent","mdxType","xmlns","viewBox","d","parentName","isMDXComponent","LaravelRelationships","title"],"mappings":"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","file":"component---src-pages-laravel-relationships-js-7293f2ee3d336b0a2312.js","sourcesContent":["import React from 'react';\nimport { MDXProvider } from \"@mdx-js/react\"\n\nconst components = {\n\th1: props => <h1 className=\"text-5xl lg:text-6xl font-bold font-slant text-gray-800\" { ...props } />,\n\th2: props => <h2 className=\"text-xl lg:text-3xl font-bold font-slant my-4\" { ...props } />,\n\th3: props => <h3 className=\"text-xl lg:text-3xl font-bold font-slant mt-6 mb-2 text-gray-600\" { ...props } />,\n\th4: props => <h4 className=\"text-xl lg:text-2xl font-bold mt-6 mb-1\" { ...props } />,\n\tp: props => <p className=\"text-xl lg:text-2xl leading-normal mb-4\" { ...props } />,\n\tul: props => <ul className=\"pl-12 my-4 list-disc\" {...props} />,\n\tol: props => <ul className=\"pl-12 my-4 list-decimal\" {...props} />,\n\tli: props => <li className=\"text-xl lg:text-2xl leading-normal mb-4\" {...props} />,\n};\n\nexport default function MarkdownLayout({ children }) {\n\treturn (\n\t\t<MDXProvider components={ components }>\n\t\t\t{ children }\n\t\t</MDXProvider>\n\t)\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/cmorrell-com/cmorrell-com/src/components/MarkdownLayout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Digging into Laravel relationships`}</h1>\n    <div className=\"bg-blue-100 p-4 border border-blue-200 rounded my-4 flex items-center\">\n\t<div className=\"w-10\">\n\t\t<svg className=\"w-6 h-6 text-blue-800 fill-current\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n\t\t\t<path d=\"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm0-338c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\" />\n\t\t</svg>\n\t</div>\n\t<div className=\"flex-1\">\n\t\tI've been spending some time digging into the anatomy of Laravel relationships. I'm\n\t\tusing this a place to keep notes that I may some day work into a more useful article.\n\t</div>\n    </div>\n    <h3>{`Model > HasRelationships`}</h3>\n    <p>{`This trait is more related to the relationship attributes and instancesâ€”setting,\ngetting, checking the existence of, etc. The other functionality revolves around\ninstantiating `}<inlineCode parentName=\"p\">{`Relation`}</inlineCode>{` objects and guessing key names/etc when not provided.`}</p>\n    <h4>{`$relations`}</h4>\n    <p>{`This is an array that holds all the loaded relationships for the model.`}</p>\n    <h4>{`$touches`}</h4>\n    <p>{`This is a list of all relationships that should be \"touched\" when the model is saved.`}</p>\n    <h4>{`static function resolveRelationUsing($name, Closure $callback)`}</h4>\n    <p>{`This lets you define relationships outside of the model itself, which are then resolved when\n`}<inlineCode parentName=\"p\">{`Model::__call()`}</inlineCode>{` is used to load the relationship. Not really recommended unless you're dynamically\ncreating relationships for models inside a package.`}</p>\n    <h4>{`hasX, morphX, belongsToX, etc`}</h4>\n    <p>{`These methods are just helpers to instantiate a Relation object.`}</p>\n    <h4>{`touchOwners()`}</h4>\n    <p>{`This loops through all the `}<inlineCode parentName=\"p\">{`$touches`}</inlineCode>{` models and calls `}<inlineCode parentName=\"p\">{`$this->$relation()->touch()`}</inlineCode>{`. It\nalso runs recursively, so that each relation that's touched also calls `}<inlineCode parentName=\"p\">{`touchOwners()`}</inlineCode>{`\non all its configured `}<inlineCode parentName=\"p\">{`$touches`}</inlineCode>{`.`}</p>\n    <h3>{`Eloquent Builder`}</h3>\n    <h4>{`$eagerLoad`}</h4>\n    <p>{`This is the array of relationships that need to be eager loaded. They're set using `}<inlineCode parentName=\"p\">{`with()`}</inlineCode>{`.`}</p>\n    <h4>{`eagerLoadRelations()`}</h4>\n    <p>{`Calls protected method `}<inlineCode parentName=\"p\">{`eagerLoadRelations`}</inlineCode>{` for each `}<inlineCode parentName=\"p\">{`$eagerLoad`}</inlineCode></p>\n    <h4>{`eagerLoadRelation()`}</h4>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Get the relation via `}<inlineCode parentName=\"p\">{`getRelation()`}</inlineCode>{` (which loads it without constraints and\napplies any nest `}<inlineCode parentName=\"p\">{`with()`}</inlineCode>{` statements as needed)`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Calls `}<inlineCode parentName=\"p\">{`addEagerConstraints()`}</inlineCode>{` on the relation`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Applies any custom constraints to the relationship query that were passed in as\narguments to the `}<inlineCode parentName=\"p\">{`with()`}</inlineCode>{` call (just calls the closure)`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Matches the results back to the parent models by calling `}<inlineCode parentName=\"p\">{`match()`}</inlineCode>{` on the relation`}</p>\n      </li>\n    </ol>\n    <h3>{`Eloquent Builder > QueriesRelationship`}</h3>\n    <h4>{`has()`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`has()`}</inlineCode>{` method is used under the hood for `}<inlineCode parentName=\"p\">{`whereHas`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`orHas`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`doesntHave`}</inlineCode>{`/etc. It's\nresponsible for checking for the existence or count of a relation inside a model query.`}</p>\n    <p>{`The basic anatomy of a `}<inlineCode parentName=\"p\">{`has()`}</inlineCode>{` call:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Get an instance of the relation by calling `}<inlineCode parentName=\"p\">{`getRelationWithoutConstraints()`}</inlineCode>{`â€”this specifically\nloads the relationship without any default constraints applied.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Call `}<inlineCode parentName=\"p\">{`getRelationExistenceQuery()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`getRelationExistenceCountQuery()`}</inlineCode>{` depending on\nwhether the `}<inlineCode parentName=\"p\">{`$count`}</inlineCode>{` matters (if we're doing `}<inlineCode parentName=\"p\">{`>= 1`}</inlineCode>{` then `}<inlineCode parentName=\"p\">{`where exists`}</inlineCode>{` is the same\nsemantics but a faster query, and if we're doing `}<inlineCode parentName=\"p\">{`< 1`}</inlineCode>{` then the same is true for\n`}<inlineCode parentName=\"p\">{`where not exists`}</inlineCode>{`).`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`If a callback was added, apply the callback using `}<inlineCode parentName=\"p\">{`Builder::callScope`}</inlineCode>{` which is\nresponsible for merging in `}<inlineCode parentName=\"p\">{`where`}</inlineCode>{` statements/etc. The most important thing to note\nhere is that if our callback adds additional `}<inlineCode parentName=\"p\">{`where`}</inlineCode>{` statements to the query, the\n`}<inlineCode parentName=\"p\">{`callScope`}</inlineCode>{` method will wrap them in a group so that `}<inlineCode parentName=\"p\">{`or where`}</inlineCode>{` statements don't impact\nthe rest of the query.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Call `}<inlineCode parentName=\"p\">{`addHasWhere`}</inlineCode>{` to add our newly instantiated subquery to the builder:`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`This first calls `}<inlineCode parentName=\"p\">{`Builder::mergeConstraintsFrom`}</inlineCode>{` to ensure that any custom\nconstraints that are defined in the model's `}<inlineCode parentName=\"p\">{`newBaseQueryBuilder`}</inlineCode>{` or\n`}<inlineCode parentName=\"p\">{`newEloquentBuilder`}</inlineCode>{` methods are properly applied.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Then it either calls `}<inlineCode parentName=\"p\">{`addWhereExistsQuery`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`addWhereCountQuery`}</inlineCode>{` using the same\nheuristics from above, adding the either a `}<inlineCode parentName=\"p\">{`Where`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Exists`}</inlineCode>{` statement to the\nunderlying query builder.`}</p>\n      </li>\n    </ol>\n    <h4>{`withAggregate()`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`withAggregate()`}</inlineCode>{` method is responsible for all the `}<inlineCode parentName=\"p\">{`withCount`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`withMax`}</inlineCode>{`/etc calls:`}</p>\n    <h2>{`Relation Interface`}</h2>\n    <p>{`These are the relationship methods that seem to actually matter to outside callers:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Relation::noConstraints`}</inlineCode>{` â€” tells relationships to load without the default constraints. This\nsets a static property that relationships have to check during `}<inlineCode parentName=\"li\">{`__construct()`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getRelationExistenceQuery`}</inlineCode>{` â€” gets the version of the relationship for checking the existence\nof the related models. This is usually a `}<inlineCode parentName=\"li\">{`where exists ( ... )`}</inlineCode>{` subquery.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getRelationExistenceCountQuery`}</inlineCode>{` â€” same as above but for when the count matters`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getRelated`}</inlineCode>{` â€” get the model for use in the relationship`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getRelationCountHash`}</inlineCode>{` â€” get an alias name that can be used when joining a table to itself\nor for other cases where a distinction needs to be made between multiple references to the\nsame table. Generally results in `}<inlineCode parentName=\"li\">{`\"laravel_reserved_X\"`}</inlineCode>{` where `}<inlineCode parentName=\"li\">{`X`}</inlineCode>{` is incremented each time.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getResults`}</inlineCode>{` â€” get the results of the query in a non-eager call`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getEager`}</inlineCode>{` â€” get the results of the query in an eager call`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`addEagerConstraints`}</inlineCode>{` â€” tells the relation to apply eager constraints to the query`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`match`}</inlineCode>{` â€” responsible for matching results back to parent models`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initRelation`}</inlineCode>{` â€” initialize the relation before query. In the case of a hasMany, for instance,\nthis will set up an empty Eloquent Collection`}</li>\n    </ul>\n    <h2>{`General Notes`}</h2>\n    <p>{`In `}<inlineCode parentName=\"p\">{`HasRelationships::morphTo`}</inlineCode>{` the framework uses the lack of attributes to determine if a relation\nshould be instantiated in an eager/non-eager context.`}</p>\n    <p>{`It's necessary to handle self-relationships where a table may be joined in multiple\ntimes, and therefore needs to do something like `}<inlineCode parentName=\"p\">{`getRelationExistenceQueryForSelfRelation`}</inlineCode>{` `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React, { useState } from \"react\";\nimport Layout from \"../components/layout\";\nimport SEO from '../components/seo.js';\nimport Article from '../mdx/laravel-relationships.mdx';\n\nconst Comment = ({ children }) => <div\n\tclassName=\"text-gray-600 font-mono whitespace-no-wrap\"\n\tchildren={ children }\n/>;\n\nconst ConfigLine = ({ children }) => <div\n\tclassName=\"text-gray-900 font-mono whitespace-no-wrap\"\n\tchildren={ children }\n/>;\n\nconst Spacer = () => <div className=\"my-4\" />;\n\nexport default function LaravelRelationships() {\n\t\n\treturn (\n\t\t<Layout>\n\t\t\t\n\t\t\t<SEO title=\"Digging into Laravel relationships - Chris Morrell\" />\n\t\t\t\n\t\t\t<Article />\n\t\t\n\t\t</Layout>\n\t);\n}\n"],"sourceRoot":""}
(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{fZJ4:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return i}));var n=a("q1tI"),l=a.n(n),r=a("Bl7J"),s=a("vrFN"),o=function(e){var t=e.children;return l.a.createElement("div",{className:"text-gray-600 font-mono whitespace-no-wrap",children:t})},m=function(e){var t=e.children;return l.a.createElement("div",{className:"text-gray-900 font-mono whitespace-no-wrap",children:t})},c=function(){return l.a.createElement("div",{className:"my-4"})};function i(){var e=Object(n.useState)(60),t=e[0],a=e[1],i=Object(n.useState)(8),u=i[0],p=i[1],d=Object(n.useState)(2),h=d[0],f=d[1],y=u-h,g=Math.round(1024*y/t),E=5*Math.floor(g/5),x=5*Math.floor(E/2/5),b=5*Math.floor((E-x/2)/5);return l.a.createElement(r.a,null,l.a.createElement(s.a,{title:"Tuning dynamic php-fpm settings - Chris Morrell"}),l.a.createElement("h1",{className:"text-5xl lg:text-6xl font-bold font-slant text-gray-800"},"Tuning dynamic php-fpm settings"),l.a.createElement("p",{className:"text-xl lg:text-2xl leading-normal my-4"},"This is as much a note to self than anything else. Each time I need to change my ",l.a.createElement("code",null,"php-fpm")," settings, I need to Google “php-fpm dynamic tuning” or something similar. With a little luck, next time I Google it, I'll find this page :)"),l.a.createElement("h2",{className:"text-xl lg:text-3xl font-bold font-slant my-4"},"Step one: Figuring out how much memory your typical PHP process uses"),l.a.createElement("p",{className:"text-xl leading-normal my-4"},"First we need to figure out how much memory a typical PHP process uses. This will inform the total number of processes that we’re going to run. We can do that with this nifty command:"),l.a.createElement("p",{className:"my-4"},l.a.createElement("code",{children:'ps --no-headers -o "rss,cmd" -C php-fpm | awk \'{ sum+=$1 } END { printf ("%d%s\\n", sum/NR/1024,"M") }\''})),l.a.createElement("p",{className:"text-xl leading-normal my-4"},"The ",l.a.createElement("code",null,"ps")," bit will show all the current running ",l.a.createElement("code",null,"php-fpm")," processes (including their memory consumption), and then the ",l.a.createElement("code",null,"awk")," bit adds them all up and pretty-prints the value in MB."),l.a.createElement("p",{className:"text-xl leading-normal my-4"},"In the end, this will print out a nice number for us. Something in the ",l.a.createElement("strong",null,"40–60 MB range")," is to be expected with a typical Laravel app."),l.a.createElement("h2",{className:"text-xl lg:text-3xl font-bold font-slant my-4"},"Step two: Deciding how much memory to give to PHP"),l.a.createElement("p",{className:"text-xl leading-normal my-4"},"This one is entirely up to you. You want to leave some memory for the other processes on your server. If the server is dedicated to running PHP only, you can dedicate most of your RAM to the php-fpm processes. On the other hand, if you’re also running a database server, redis, etc, you’re going to need to leave space for those to run."),l.a.createElement("p",{className:"text-xl leading-normal my-4"},"Keep in mind that if you have queue workers running on your server, they'll each take up about the same amount of RAM as your other PHP processes. So, for example, if you have 10 queue workers running on your server and your processes take about 50 MB or RAM, that's another 500 MB of RAM that you need to set aside."),l.a.createElement("p",{className:"text-xl leading-normal my-4"},"In my most recent case, I needed to account for the fact that sometimes we have other processes running that consume about 1 GB of RAM. To play it safe, I decided to reserve 2 GB of RAM for “system and other” processes. On a instance with 8 GB of RAM, ",l.a.createElement("strong",null,"that leaves us with 6 GB for PHP"),"."),l.a.createElement("h2",{className:"text-xl lg:text-3xl font-bold font-slant my-4"},"Now, let's let the computers do math for us:"),l.a.createElement("div",{className:"my-4 border rounded p-4"},l.a.createElement("div",{className:"lg:flex -mx-2"},l.a.createElement("div",{className:"mb-2 flex-1 flex flex-col justify-center mx-2 border rounded"},l.a.createElement("label",{className:"font-bold mb-1 bg-gray-100 text-center p-2"},"Total RAM:"),l.a.createElement("div",{className:"flex justify-center items-baseline p-2 -mx-1"},l.a.createElement("input",{className:"border border-gray-300 p-2 rounded focus:border-gray-500 mx-1",type:"number",min:"0",step:".5",value:u,onChange:function(e){return p(parseFloat(e.target.value))}}),l.a.createElement("span",{className:"mx-1 font-bold"},"GB"))),l.a.createElement("div",{className:"mb-2 flex-1 flex flex-col justify-center mx-2 border rounded"},l.a.createElement("label",{className:"font-bold mb-1 bg-gray-100 text-center p-2"},"Reserved RAM:"),l.a.createElement("div",{className:"flex justify-center items-baseline p-2 -mx-1"},l.a.createElement("input",{className:"border border-gray-300 p-2 rounded focus:border-gray-500 mx-1",type:"number",min:"0",step:".5",value:h,onChange:function(e){return f(parseFloat(e.target.value))}}),l.a.createElement("span",{className:"mx-1 font-bold"},"GB"))),l.a.createElement("div",{className:"mb-2 flex-1 flex flex-col justify-center mx-2 border rounded"},l.a.createElement("label",{className:"font-bold mb-1 bg-gray-100 text-center p-2"},"Average php-fpm process:"),l.a.createElement("div",{className:"flex justify-center items-baseline p-2 -mx-1"},l.a.createElement("input",{className:"border border-gray-300 p-2 rounded focus:border-gray-500 mx-1",type:"number",min:"0",step:".5",value:t,onChange:function(e){return a(parseFloat(e.target.value))}}),l.a.createElement("span",{className:"mx-1 font-bold"},"MB")))),l.a.createElement("div",{className:"pt-2"},l.a.createElement("h3",{className:"font-bold mb-1"},"Suggested Settings:"),l.a.createElement("div",{className:"bg-gray-100 p-2 rounded mt-4 border text-sm overflow-x-auto w-full"},l.a.createElement(o,null,'; Run php-fpm in "dynamic" mode'),l.a.createElement(m,null,"pm = ",l.a.createElement("strong",null,"dynamic")),l.a.createElement(c,null),l.a.createElement(o,null,"; Set max_children to ([total RAM - reserved RAM]) / [average php-fpm process])"),l.a.createElement(o,null,"; Most recently: (1024 * (",u," - ",h,")) / ",t," = ",g),l.a.createElement(m,null,"pm.max_children = ",l.a.createElement("strong",null,E)),l.a.createElement(c,null),l.a.createElement(o,null,"; When php-fpm starts, have this many processes waiting for requests. Set to 50% of"),l.a.createElement(o,null,"; max on a server that's mostly responsible for running PHP processes"),l.a.createElement(m,null,"pm.start_servers = ",l.a.createElement("strong",null,x)),l.a.createElement(c,null),l.a.createElement(o,null,"; Minimum number spare processes php-fpm will create. In the case of a"),l.a.createElement(o,null,"; server dedicated to running PHP, we'll set this to the same as start_servers"),l.a.createElement(m,null,"pm.min_spare_servers = ",l.a.createElement("strong",null,x)),l.a.createElement(c,null),l.a.createElement(o,null,"; Maximum number spare processes php-fpm will create. If more than this"),l.a.createElement(o,null,"; many processes are idle, some will be killed."),l.a.createElement(m,null,"pm.max_spare_servers = ",l.a.createElement("strong",null,b)),l.a.createElement(c,null),l.a.createElement(o,null,"; After this many requests, a php-fpm process will respawn. This is useful"),l.a.createElement(o,null,"; to guard against memory leaks, but causes a small performance hit. Set to"),l.a.createElement(o,null,"; a high number (or 0) if you're confident that your app does not have any"),l.a.createElement(o,null,"; memory leaks (and that you're not using any 3rd-party libraries that have"),l.a.createElement(o,null,"; memory leaks), or set to a lower number if you're aware of a leak."),l.a.createElement(m,null,"pm.max_requests = ",l.a.createElement("strong",null,"500"))))))}}}]);
//# sourceMappingURL=component---src-pages-php-fpm-js-0bcf9534661e07e554a9.js.map